x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
samp <- rnorm(n = 7, mean = 0, sd = 1)
plot(density(x = samp))
samp2 <- rnorm(n = 3, mean = 0, sd = 1)
lines(density(x = samp2), col = 2)
x <- seq(-5,5,.1)
lines(x, dnorm(x, 0,1), col=3)
c1 <- rbinom(1, 10, prob=.5)
c1
c1 <- rbinom(2, 10, prob=.5)
c1
c1 <- rbinom(100, 10, prob=.5)
c1
hist(c1)
c2 <- rbinom(100, 10, prob=.7)
par(c(2,1))
hist(c1)
hist(2)
hist(c2)
hist(c1)
hist(c2)
par(c(2,1))
mpar(c(2,1))
mpar(mfrow=c(2,1))
par(mfrow=c(2,1))
hist(c1)
hist(c2)
k.hat=sum(c1)/100
k.hat
sum(c1)
c1 <- rbinom(1, 100, prob=.5)
c2 <- rbinom(1, 100, prob=.7)
k.hat=c1/100
k.hat
c1
dbinom(c1, size=100, prob=k.hat)
c1
k <- c(0,1,.01)
k
k <- seq(0,1,.01)
k
y=dbinom(c1, 100, k.hat)
plot(y,k)
y=dbinom(c1, 100, k)
plot(y,k)
plot(k, y, type='l')
dbinom(c1, size=100, prob=k.hat)
L1=dbinom(c1, size=100, prob=k.hat)
L1=dbinom(c2, size=100, prob=c2/100)
L1=dbinom(c1, size=100, prob=k.hat)
L2=dbinom(c2, size=100, prob=c2/100)
L2
L1.infer=dbinom(c1, size=100, prob=k.hat)
L1.fair=dbinom(c1, size=100, prob=.5)
L1.fair
2*1-2*log(L1.infer)
2*0-2*log(L1.fair)
L2=dbinom(c2, size=100, prob=c2/100)
L2.fair=dbinom(c2, size=100, prob=.5)
2*1-2*log(L2)
2*0-2*log(L2.fair)
c2 <- rbinom(1, 3, prob=.7)
c2
L2=dbinom(c2, size=100, prob=c2/100)
L2.fair=dbinom(c2, size=100, prob=.5)
2*1-2*log(L2)
2*0-2*log(L2.fair)
L2=dbinom(c2, size=3, prob=c2/3)
L2.fair=dbinom(c2, size=3, prob=.5)
2*1-2*log(L2)
2*0-2*log(L2.fair)
c2
c2/3
2*1-2*log(L2)
2*0-2*log(L2.fair)
Bin.ln <- function(par, size, k){
log(dbinom(k, size=size, prob=par))
}
c1
nlm(Bin.ln, c(0,1), size=100, k=c1)
Bin.ln <- function(par, size, k){
-1*log(dbinom(k, size=size, prob=par))
}
nlm(Bin.ln, c(0,1), size=100, k=c1)
nlm(Bin.ln, c(0.5), size=100, k=c1)
k <- seq(0,1,.01)
Bin.lnfunction(par=k, size, k)
Bin.ln(par=k, size, k)
Bin.ln(par=k, size=100, k=45)
x=Bin.ln(par=k, size=100, k=45)
y=Bin.ln(par=k, size=100, k=45)
plot(k,y)
optimize(c(.1), Bin.ln, size=100, k=45, lower = 0, upper = 1)
Bin.ln <- function(par, size, k){
-1*log(dbinom(k, size=size, prob=par))
}
optimize(c(.1), Bin.ln, size=100, k=45, lower = 0, upper = 1)
optimize( Bin.ln, size=100, k=45, lower = 0, upper = 1)
optimize( Bin.ln, size=100, k=45, lower = 0, upper = 1)
plot(k,y)
res=optimize( Bin.ln, size=100, k=c1, lower = 0, upper = 1)
c1
res
res$objective
exp(res$objective)
exp(res$objective*-1)
dbinom(c1, size=100, prob=k.hat)
#--------
rnorm(100, 60, 20)
#--------
dt <- rnorm(100, 60, 20)
#--------
dt <- rnorm(100, 60, 5)
Norm.ln <- function(par, data){
-1*sum(log(dnorm(dt, par[1], par[2])))
}
optimize( Norm.ln, data=dt, lower = c(0,0), upper = c(200,200))
optimize( Norm.ln, data=dt, lower = c(0,0), upper = c(200,200))
Norm.ln(par=c(60,5), data=dt)
optimize( Norm.ln, data=dt, lower = c(0,1), upper = c(200,50))
optimize( Norm.ln, data=dt, lower = c(0,1), upper = c(200,10))
warnings()
optimize( Norm.ln, data=dt, lower = c(1,1), upper = c(150,10))
optimize(par(c(1,1)) Norm.ln, data=dt, lower = c(1,1), upper = c(150,10))
optimize(par(c(1,1)), Norm.ln, data=dt, lower = c(1,1), upper = c(150,10))
optim(par(c(1,1)), Norm.ln, data=dt, lower = c(1,1), upper = c(150,10))
optim(par(c(1,1)), Norm.ln, data=dt)
optim(par(c(50,1)), Norm.ln, data=dt)
res=optim( Bin.ln, size=100, k=c1, lower = 0, upper = 1)
optim(par=c(1,1), Norm.ln, data=dt)
optim(par=c(1,1), Norm.ln, data=dt, lower = 1, upper = 200)
optim(par=c(1,1), Norm.ln, data=dt, lower = c(1,1), upper = c(200,200))
optim(par=c(1,1), Norm.ln, data=dt)
optim(par=c(10,2), Norm.ln, data=dt)
optim(par=c(10,2), Norm.ln, data=dt)
optim(par=c(10,2), Norm.ln, data=dt)
optim(par=c(10,2), Norm.ln, data=dt, lower = c(1,1), method ="Brent", upper = c(200,200))
optim(par=c(10,2), Norm.ln, data=dt)
heads1=rbinom(1, 100, prob=.5)
heads2=rbinom(1, 100, prob=.7)
heads1
heads2
heads1=rbinom(1, 100, prob= .5)
heads1
heads2=rbinom(1, 100, prob= )
heads2
heads1=rbinom(1, 100, prob= .5)
heads2=rbinom(1, 100, prob= .7)
heads1=rbinom(1, 100, prob= .5)
heads2=rbinom(1, 100, prob= .7)
heads1
heads2
4300/12
cars
plot(cars)
4000*.19
4000*.81
4000*.78
4300*.78
4300*.22
3117-2737
33494/12
4300*.78
4300*12
4000*.7
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Gryonoides_MS")
#devtools::install_github('coolbutuseless/minilexer')
library(reticulate)
library("minilexer")
library("ontologyIndex")
#devtools::install_github("gadenbuie/regexplain")
#library("regexplain")
library("igraph")
library("stringr")
library("dplyr")
library("rdflib")
library(tidyr)
library(tibble)
library(jsonld)
library("redland")
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/R_scripts/Functions")
source('parser_functions.R')
source_python('py_func.R')
# Setwd Descriptions
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Gryonoides_MS/Descriptions")
descr <- readLines('G_brasilensis.R')
descr
# remove comments
descr <- str_remove(descr, '#.+')
# merge
descr <- paste0(descr, collapse = ' ')
# remove 2 or more whitespaces
descr <-str_squish(descr)
#str_view_all(descr, '\\s')
descr <-gsub('\n', '', descr)
descr <-strsplit(descr, '\\{')
descr <-descr[[1]][-1]
descr <-strsplit(descr, '\\}')
#
sp_names <- descr[[1]][1]
descr <-descr[[1]][2]
# remove unnecessary white speces (Ws, Ws)
descr <-str_replace_all(descr, '\\s\\)', '\\)')
descr <-str_replace_all(descr, '\\(\\s', '\\(')
# change not() to Not()
descr <-str_replace_all(descr, 'not\\(', 'Not\\(')
sp_descr <- lapply(descr, function(x) strsplit(x, ';')[[1]] )
# remove white at the beginning
sp_descr <-lapply(sp_descr, function(x) trimws(x))
names(sp_descr) <- sp_names[[1]]
# ADD HAS PART
sp_descr[[1]] <- sapply(sp_descr[[1]], function(x) add_HasPart_ophu(x), USE.NAMES = F )
sp_descr[[1]]
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/R_scripts/Functions")
source('parser_functions.R')
source_python('py_func.R')
# ADD HAS PART
sp_descr[[1]] <- sapply(sp_descr[[1]], function(x) add_HasPart_ophu(x), USE.NAMES = F )
# Setwd Descriptions
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Gryonoides_MS/Descriptions")
descr <- readLines('G_brasilensis.R')
# remove comments
descr <- str_remove(descr, '#.+')
# merge
descr <- paste0(descr, collapse = ' ')
# remove 2 or more whitespaces
descr <-str_squish(descr)
#str_view_all(descr, '\\s')
descr <-gsub('\n', '', descr)
descr <-strsplit(descr, '\\{')
descr <-descr[[1]][-1]
descr <-strsplit(descr, '\\}')
#
sp_names <- descr[[1]][1]
descr <-descr[[1]][2]
# remove unnecessary white speces (Ws, Ws)
descr <-str_replace_all(descr, '\\s\\)', '\\)')
descr <-str_replace_all(descr, '\\(\\s', '\\(')
# change not() to Not()
descr <-str_replace_all(descr, 'not\\(', 'Not\\(')
sp_descr <- lapply(descr, function(x) strsplit(x, ';')[[1]] )
# remove white at the beginning
sp_descr <-lapply(sp_descr, function(x) trimws(x))
names(sp_descr) <- sp_names[[1]]
# ADD HAS PART
sp_descr[[1]] <- sapply(sp_descr[[1]], function(x) add_HasPart_ophu(x), USE.NAMES = F )
man.syn <- sapply(sp_descr[[1]], function(x) create_ophus(x), USE.NAMES = F)
owl.syn <- sapply(man.syn, function(x) translate2URIs_oneToken(x, ont.transl, Manchester.pattern), USE.NAMES = F)
man.syn
#--- onto names for translations
# see Snippets.R, object 'all'
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/R_scripts/data")
all <- read.csv(file='all_ontologies_tibble4Snippets.csv', stringsAsFactors = F)
all <-as_tibble(all)
all
# make lables for onto translations
all <-all %>% mutate(label.transl=label.final)
# add dot to properties and data_props
all <-all %>% mutate(label.transl=replace(label.transl, type=='prop', paste0(filter(all, type=='prop')$label.transl, '.') ))
all <-all %>% mutate(label.transl=replace(label.transl, type=='data_prop', paste0(filter(all, type=='data_prop')$label.transl, '.') ))
# add dot to IDs of properties and data_props
all <-all %>% mutate(ID.transl=ID)
all <-all %>% mutate(ID.transl=replace(ID.transl, type=='prop', paste0(filter(all, type=='prop')$ID.transl, '.') ))
all <-all %>% mutate(ID.transl=replace(ID.transl, type=='data_prop', paste0(filter(all, type=='data_prop')$ID.transl, '.') ))
filter(all, type=='prop')
filter(all, type=='prop') %>% select(label.transl, ID.transl)
all$label.transl
all$ID.transl
all$label.transl[all$label.transl=='SCARAB.has_measurement.']
# Remove SCARAB in labels
all$label.transl <- gsub('SCARAB.', '', all$label.transl)
all$ID.transl <- gsub('SCARAB.', 'scarab.', all$ID.transl)
all$label.transl[all$label.transl=='has_measurement.']
# make ttranslation obj
ont.transl <- all$label.transl
names(ont.transl) <-all$ID.transl
ont.transl
owl.syn <- sapply(man.syn, function(x) translate2URIs_oneToken(x, ont.transl, Manchester.pattern), USE.NAMES = F)
owl.syn
#--- validate
val <- sapply(man.syn, function(x) validate_translate2URIs_oneToken(x, ont.transl, Manchester.pattern), USE.NAMES = F)
val <- lapply(val, function(x) x[names(x)=='name.dot' | names(x)=='name'])
val <- lapply(val, function(x) x[x!='some' & x!='not' & x!='Not'])
val <- lapply(val, function(x) x[!str_detect(x, '[0-9]')])
ln=lapply(val, length) %>% unlist
val <- val[ln>0]
tt <- unlist(val) %>% unique()
cat(tt)
owl.syn
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Gryonoides_MS/Descriptions")
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Gryonoides_MS")
owl.syn
owl.syn[1:5]
owl.syn <- owl.syn[1:5]
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/Ontologies")
repl_python()
from owlready2 import *
onto_path.append("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/Ontologies")
repl_python()
from owlready2 import *
onto_path.append("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/Ontologies")
repl_python()
from owlready2 import *
repl_python()
scarab = get_ontology("SCARAB_merged.owl")
scarab.load()
scarab = get_ontology("SCARAB_merged.owl")
repl_python()
j <- 1
#for (j in 1:3){
for (i in 1:length(owl.syn)){
#  for (i in 1:5){
# CL1 <- py_make_class(class_id=paste0('ophu_sp_',j,'_', i), subclass_of='scarab.OPHU_EQ', restriction='is_a', def=owl.syn[i])
# py_run_string(CL1, local = FALSE, convert = F)
CL1 <- py_make_class(class_id=paste0('ophu_sp_',j,'_', i), subclass_of='scarab.OPHU_EQ', restriction='equivalent_to', def=owl.syn[i])
py_run_string(CL1, local = FALSE, convert = F)
# }
}
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Gryonoides_MS")
py_run_string('scarab.save(file = "Gryo_merged.owl", format = "rdfxml")', local = FALSE, convert = F)
man.syn[1:5]
man.syn[1:10]
man.syn[1:15]
man.syn[15:20]
owl.syn <- owl.syn[15:20]
owl.syn
owl.syn[15:20]
owl.syn <- sapply(man.syn, function(x) translate2URIs_oneToken(x, ont.transl, Manchester.pattern), USE.NAMES = F)
owl.syn <- owl.syn[15:20]
owl.syn
j <- 1
#for (j in 1:3){
for (i in 1:length(owl.syn)){
#  for (i in 1:5){
# CL1 <- py_make_class(class_id=paste0('ophu_sp_',j,'_', i), subclass_of='scarab.OPHU_EQ', restriction='is_a', def=owl.syn[i])
# py_run_string(CL1, local = FALSE, convert = F)
CL1 <- py_make_class(class_id=paste0('ophu_sp_',j,'_', i), subclass_of='scarab.OPHU_EQ', restriction='equivalent_to', def=owl.syn[i])
py_run_string(CL1, local = FALSE, convert = F)
# }
}
setwd("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/Ontologies")
repl_python()
from owlready2 import *
onto_path.append("~/Documents/My_papers/Semantic_discriptions/Protege/PhenoScript_R/PhenoScript/Dichotomius_paper/Ontologies")
scarab = get_ontology("SCARAB_merged.owl")
scarab.load()
obo = scarab.get_namespace("http://purl.obolibrary.org/obo/")
pato = scarab.get_namespace("http://purl.obolibrary.org/obo/pato")
repl_python()
