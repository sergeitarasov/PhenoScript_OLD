'3.2',
'real',
'0.67',
'real',
'2.3',
'real',
'5',
'int',
'1950',
'int',
'4.2',
'real',
'2.3',
'real',
'2',
'int',
'2',
'int',
'1.8',
'real',
'0.8',
'real',
'Gryonoides_fuscoclavatus',
'Gryonoides_fuscoclavatus',
'1',
'int',
'4.8',
'real',
'3',
'int',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2350',
'int',
'0.8',
'real',
'4.3',
'real',
'2.8',
'real',
'2',
'int',
'1',
'int',
'2',
'int',
'0.2',
'real',
'Gryonoides_garciai',
'Gryonoides_garciai',
'1',
'int',
'4.8',
'real',
'3',
'int',
'2.8',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2300',
'int',
'4.3',
'real',
'2.6',
'real',
'2',
'int',
'1',
'int',
'1.8',
'real',
'0.2',
'real',
'Gryonoides_glabriceps',
'Gryonoides_glabriceps',
'1',
'int',
'5.1',
'real',
'3',
'int',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2350',
'int',
'4.3',
'real',
'2',
'int',
'2',
'int',
'1.9',
'real',
'0.2',
'real',
'Gryonoides_mexicali',
'Gryonoides_mexicali',
'1',
'int',
'5.2',
'real',
'3',
'int',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'6',
'int',
'2450',
'int',
'6.8',
'real',
'2.9',
'real',
'2',
'int',
'2',
'int',
'1.9',
'real',
'0.2',
'real',
'Gryonoides_mirabilicornis',
'Gryonoides_mirabilicornis',
'3.9',
'real',
'3',
'int',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2650',
'int',
'1.8',
'real',
'Pit',
'Pit',
'2',
'int',
'1',
'int',
'2',
'int',
'0.2',
'real',
'Gryonoides_obtusus',
'Gryonoides_obtusus',
'1',
'int',
'5.1',
'real',
'3',
'int',
'3',
'int',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2800',
'int',
'0.8',
'real',
'4.3',
'real',
'2',
'int',
'2',
'int',
'0.9',
'real',
'0.2',
'real',
'Gryonoides_pulchellus_pulchellus',
'Gryonoides_pulchellus_pulchellus',
'1',
'int',
'4.9',
'real',
'3',
'int',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2650',
'int',
'0.8',
'real',
'4.3',
'real',
'2.5',
'real',
'2',
'int',
'2',
'int',
'Length',
'Length',
'2',
'int',
'0.2',
'real',
'Gryonoides_pulchellus_pulchricornis',
'Gryonoides_pulchellus_pulchricornis',
'5.1',
'real',
'3',
'int',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2100',
'int',
'eight_flagellomere',
'twelwth_flagellomere',
'eight_flagellomere',
'twelwth_flagellomere',
'Gryonoides_pulchellus_doddi',
'Gryonoides_pulchellus_doddi',
'1',
'int',
'4.8',
'real',
'2.9',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2810',
'int',
'aabdominal_tergum_2',
'aabdominal_tergum_2',
'Gryonoides_rugosus',
'Gryonoides_rugosus',
'1',
'int',
'5.1',
'real',
'3',
'int',
'2.8',
'real',
'0.67',
'real',
'1.9',
'real',
'5',
'int',
'2350',
'int',
'pedice',
'pedice',
'axilla_metanotum',
'axilla_metanotum',
'6.7',
'real',
'3',
'int',
'2',
'int',
'1',
'int',
'2.1',
'real',
'0.2',
'real',
'Gryonoides_uruguayensis',
'Gryonoides_uruguayensis',
'1',
'int',
'5.1',
'real',
'3',
'int',
'2.8',
'real',
'0.67',
'real',
'1.8',
'real',
'4',
'int',
'2800',
'int',
'0.8',
'real',
'4.3',
'real',
'2.7',
'real',
'Centered',
'2',
'int',
'0.2',
'real',
'translated phs:node_property: 8822; NA phs:node_property: 399')
library(dplyr)
unique(aa) %>% sort
unique(aa) %>% sort
reticulate::repl_python()
library(xml2)
library(dplyr)
library(stringr)
library(XML)
source('phsFunctions.R')
setwd("~/Documents/My_papers/Phenoscript_2021/Gryonoides/Phenoscript/example")
doc = newXMLDoc( )
root = newXMLNode('rdf:RDF',
namespace =c('obo'="http://purl.obolibrary.org/obo/",
rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#",
'owl'="http://www.w3.org/2002/07/owl#",
rdfs="http://www.w3.org/2000/01/rdf-schema#",
sta ="https://orcid.org/0000-0001-5237-2330/",
'oboI'="http://www.geneontology.org/formats/oboInOwl#",
'newT'="http://github.com/sergeitarasov/PhenoScript/gryo/",
'pato'="http://purl.obolibrary.org/obo/pato#"
),
attrs=c(xml="http://www.w3.org/XML/1998/namespace"),
parent=doc)
#PS <- read_xml("ex1_transl_test.xml")
PS <- read_xml("Gryo_trans.xml")
print(PS)
ns <- xmlNamespaceDefinitions(root)
# get all nodes
allN <- xml_find_all(PS, ".//phs:node")
un.id <- xml_attr(allN, attr='node_id') %>% unique()
# create all nodes (individuals)
for (i in un.id){
# i=un.id[1]
#print(i)
# i='1'
x.all <- xml_find_all(PS, sprintf('.//*[@phs:node_id="%s"]', i)) # node id
x <- x.all[1]
ind <- newXMLNode("owl:NamedIndividual", attrs=c('rdf:about'=i), parent=root ) # define Ind
#-- node label if no ["rdfs:label"="Gen Sp"] is provided then use iri for label
rdfsLabel <- phs_get_nodeName(x)
newXMLNode("rdfs:label", rdfsLabel, attrs=c('xml:lang'="en"), parent=ind) # label
#newXMLNode("rdfs:label", basename(i), attrs=c('xml:lang'="en"), parent=ind) # label
#--
newXMLNode("oboI:created_by", 'Phenoscript', parent=ind)
date <-  Sys.Date()
date <-str_replace_all(date, '-','.')
newXMLNode("oboI:creation_date", date, parent=ind)
# only one class for the same iri
#newXMLNode("rdf:type", attrs=c('rdf:resource'=xml_attr(x, attr='iri')), parent=ind) # class of Ind
#multiclasses for the same iri
for (j in x.all){
newXMLNode("rdf:type", attrs=c('rdf:resource'=xml_attr(j, attr='iri')), parent=ind) # class of Ind
}
}
# select node triple_pos=1
N1 <- xml_find_all(PS, './/phs:node[@phs:triple_pos="1"]')
# select unique names for node triple_pos=1
un.N1 <- xml_attr(N1, attr='node_id') %>% unique()
# make N E N
for (n_id in un.N1){
# this should be nexted!!!
#print(i)
# n_id=un.N1[6]
#get nodes with the same id N1j pos=1
N1j <- N1[xml_attr(N1, attr='node_id')==n_id] #xml_find_all(N1, sprintf('.//phs:node[@phs:node_id="%s"]', n_id) )
for (j in N1j){
# j=N1j[1]
sibs <- xml_siblings(j)
N3 <- sibs[xml_attr(sibs, 'triple_pos')==3]
Ed <- sibs[xml_attr(sibs, 'triple_pos')==2]
if (xml_name(N3)=='node'){
neg.edge <- as.logical(xml_attr(Ed, 'negative_prop'))
# check if edge is ! or not ! and make asserions
if (neg.edge==FALSE){
node.id <- xml_attr(j, 'node_id')
target <- getNodeSet(root, sprintf('.//owl:NamedIndividual[@rdf:about="%s"]', node.id) )[[1]]
e.iri <- xml_attr(Ed, 'iri')
# convert to pref:iri
e.iri <- makeBasePrefix(e.iri, ns)
xx <- newXMLNode(e.iri, attrs=c('rdf:resource'=xml_attr(N3, 'node_id')), parent=target )
} else if (neg.edge==TRUE){
node.id <- xml_attr(j, 'node_id')
tar <- xml_attr(N3, 'node_id')
e.iri <- xml_attr(Ed, 'iri')
make_rdfDescription(xml.root=root, assertion="http://www.w3.org/2002/07/owl#NegativePropertyAssertion",
source=node.id, edge=e.iri, target=tar)
} else {
cat('Error in negative edge handlling \n')
}
} else if (xml_name(N3)=='nested_node') {
node.id <- xml_attr(j, 'node_id')
target <- getNodeSet(root, sprintf('.//owl:NamedIndividual[@rdf:about="%s"]', node.id) )[[1]]
e.iri <- xml_attr(Ed, 'iri')
# convert to pref:iri
e.iri <- makeBasePrefix(e.iri, ns)
# get all children from N3
N3kids <- xml_find_all(N3, './/phs:node')
for (kid in N3kids){
# kid=N3kids[1]
newXMLNode(e.iri, attrs=c('rdf:resource'=xml_attr(kid, 'node_id')), parent=target )
} # end if
} else if (xml_name(N3)=='list_node') {
node.id <- xml_attr(j, 'node_id')
target <- getNodeSet(root, sprintf('.//owl:NamedIndividual[@rdf:about="%s"]', node.id) )[[1]]
e.iri <- xml_attr(Ed, 'iri')
# convert to pref:iri
e.iri <- makeBasePrefix(e.iri, ns)
# get all children from N3
N3kids <- xml_find_all(N3, './/phs:node')
for (kid in N3kids){
# kid=N3kids[1]
newXMLNode(e.iri, attrs=c('rdf:resource'=xml_attr(kid, 'node_id')), parent=target )
} # end if
} else if (xml_name(N3)=='numeric_node'){
node.id <- xml_attr(j, 'node_id')
target <- getNodeSet(root, sprintf('.//owl:NamedIndividual[@rdf:about="%s"]', node.id) )[[1]]
e.iri <- xml_attr(Ed, 'iri')
# convert to pref:iri
e.iri <- makeBasePrefix(e.iri, ns)
num <- xml_attr(N3, 'node_name')
xx <- newXMLNode(e.iri, num, attrs=c('rdf:datatype'=numNodeType(N3)), parent=target )
} else {
cat('Invalid Input \n')
}
}
}
otu_object <- xml_find_all(PS, './/phs:otu_object')
# loop over otu_objects ie species. in each otu_obj identify nodes that link all ophus
for (i in otu_object){
#i <- otu_object[1]
# get all phs:node_property
otu_obj_i_props <- xml_find_all(i, './/phs:otu_properties//phs:node_property')
prop_source_nodes <- otu_obj_i_props[xml_text(otu_obj_i_props)=="to_Ophu_List"]
# the tarfet ophus
ophu_list_i <- xml_find_all(i, './/phs:ophu_list')
# for each propoerty node  in prop_source_nodes
for (prop_i in prop_source_nodes){
# This function take a property node i with to_Ophu_List, finds its parent (eg organism) and links it with the set of ophus
root <- otu2ophus(root=root, prop_source_i=prop_i, ophu_list_i=ophu_list_i)
}
}
# select node triple_pos=1
#N1 <- xml_find_all(PS, './/phs:node[@phs:triple_pos="1"]')
NNL <- xml_find_all(PS, './/phs:nested_node[@phs:triple_pos="1"] | //phs:list_node[@phs:triple_pos="1"]')
for (nnli in NNL){
# nnli=NNL[1]
sibs <- xml_siblings(nnli)
N3 <- sibs[xml_attr(sibs, 'triple_pos')==3]
Ed <- sibs[xml_attr(sibs, 'triple_pos')==2]
# get all children from N1
N1kids <- xml_find_all(nnli, './/phs:node')
for (kid in N1kids){
# kid=N1kids[1]
node.id <- xml_attr(kid, 'node_id')
target <- getNodeSet(root, sprintf('.//owl:NamedIndividual[@rdf:about="%s"]', node.id) )[[1]]
e.iri <- xml_attr(Ed, 'iri')
# convert to pref:iri
e.iri <- makeBasePrefix(e.iri, ns)
newXMLNode(e.iri, attrs=c('rdf:resource'=xml_attr(N3, 'node_id')), parent=target )
} # end for
}
#--- merge indv with onto usning xml2
tmp <- saveXML(root)
my_ind <- read_xml(tmp, options = c( "NOERROR"))
saveXML(root, 'xml_root.xml')
my_ind
#onto <- read_xml("aism_instances.xml")
#onto <- read_xml("../phsDictionary/looofasz.owl")
onto <- read_xml("../phsDictionary/Gryonoides_merged_ontologies.owl")
doc2children <- xml_children(my_ind)
for (child in doc2children) {
xml_add_child(onto, child)
}
reticulate::repl_python()
from datetime import datetime
reticulate::repl_python()
